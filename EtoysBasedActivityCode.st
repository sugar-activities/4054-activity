'From etoys4.0 of 6 October 2009 [latest update: #2332] on 4 January 2010 at 4:44:51 am'!AlignmentMorph subclass: #FreeCell	instanceVariableNames: 'board cardsRemainingDisplay elapsedTimeDisplay gameNumberDisplay lastGameLost state autoMoveRecursionCount myFillStyle '	classVariableNames: 'Statistics FreeCellSingleton '	poolDictionaries: ''	category: 'Morphic-Games'!AbstractLauncher subclass: #FreeCellLauncher	instanceVariableNames: 'freeCellProperties freeCellFilename freeCellMimeType'	classVariableNames: 'FreeCellLauncherSingleton'	poolDictionaries: ''	category: 'Morphic-Games'!!Object methodsFor: 'as yet unclassified'!mzHaltNew	^ self! !!FreeCell methodsFor: 'actions'!quit	FreeCellLauncher instance saveFreeCellTitled: 'Free Cell Activity'.	Smalltalk quitPrimitive! !!FreeCell methodsFor: 'sugar serialization '!deSerializeStateFrom: aByteArray 	aByteArray		ifNil: [self error: 'deSerializeState: Invoked with nil state. I refuse to default to empty state, this indicates being called with non-null objectId with no serialized state.'].	World color: Color black.	Statistics deSerializeStateFrom: aByteArray asString! !!FreeCell methodsFor: 'sugar serialization '!displayRestored	self openInWorld.	self setToAdhereToEdge: #center.	OLPCVirtualScreen virtualScreenExtent: self extent.	OLPCVirtualScreen install! !!FreeCell methodsFor: 'sugar serialization '!serializeState	| stateString |	stateString := Statistics serializeState.	^ stateString! !!FreeCell class methodsFor: 'as yet unclassified'!instance	^ FreeCellSingleton		ifNil: [self mzHaltNew.			FreeCellSingleton := self basicNew initialize]! !!FreeCell class methodsFor: 'as yet unclassified'!new	^ FreeCell instance! !!FreeCellLauncher methodsFor: 'as yet unclassified'!createJournalEntryForFilename: aFilename mimetype: mimetype state: aState activityTitle: aTitle 	| id transferOwnership props ownedFilename activity activityId |	self mzHaltNew.	transferOwnership := false.	props := freeCellProperties				ifNil: [freeCellProperties := Dictionary new].	activity := 'org.squeak.FreeCell'.	activityId := parameters at: 'ETOYS_ACTIVITY_ID'.	{'activity' -> activity. 'activity_id' -> activityId. 'title' -> aTitle. 'title:text' -> 'FreeCell title:text'. 'title_set_by_user' -> '1'. 'keep' -> '0'. 'mtime'		-> (DateAndTime now asString first: 19). 'timestamp' -> DateAndTime now asUnixTime. 'preview' -> ''}		do: [:each | props add: each].	props		at: 'ctime'		put: (props at: 'mtime').	props at: 'mime_type' put: mimetype.	aFilename		ifNil: [props at: 'title:text' put: aTitle translated].	ownedFilename := aFilename.	ownedFilename		ifNil: [transferOwnership := false]		ifNotNil: [ownedFilename := ownedFilename squeakToUtf8].	self mzHaltNew.	props at: 'object_state' put: aState.	id := self dataStore				create: props				with: ownedFilename				with: transferOwnership.	^ id! !!FreeCellLauncher methodsFor: 'as yet unclassified'!createOrUpdateJournalEntryForFilename: aFilename mimetype: mimetypeString objectId: objectidString state: aState activityTitle: aTitle 	| id |	self mzHaltNew.	objectidString isNil		ifTrue: [id := self						createJournalEntryForFilename: aFilename						mimetype: mimetypeString						state: aState						activityTitle: aTitle]		ifFalse: [id := self						updateJournalEntryFor: objectidString						filename: aFilename						mimetype: mimetypeString						state: aState						activityTitle: aTitle]! !!FreeCellLauncher methodsFor: 'as yet unclassified'!dataStore	self mzHaltNew.	^ DBus sessionBus get: SugarDataStore! !!FreeCellLauncher methodsFor: 'as yet unclassified'!getProperties: objectId 	| props |	self mzHaltNew.	props := self dataStore getProperties: objectId.	props		at: 'title'		ifPresent: [:value | props at: 'title' put: value asString utf8ToSqueak composeAccents].	props		at: 'mime_type'		ifPresent: [:value | props at: 'mime_type' put: value asString].	^ props! !!FreeCellLauncher methodsFor: 'as yet unclassified'!saveFreeCellTitled: activityTitle 	| activityId objectId freeCell state |	self mzHaltNew.	activityId := parameters at: 'ETOYS_ACTIVITY_ID'.	objectId := parameters				at: 'OBJECT_ID'				ifAbsent: [].	freeCell := FreeCell instance.	state := freeCell serializeState.	self		saveState: state		asActivityId: activityId		objectId: objectId		activityTitle: activityTitle! !!FreeCellLauncher methodsFor: 'as yet unclassified'!saveState: state asActivityId: activityId objectId: objectId activityTitle: aTitle 	self mzHaltNew.	self		createOrUpdateJournalEntryForFilename: freeCellFilename		mimetype: freeCellMimeType		objectId: objectId		state: state		activityTitle: aTitle! !!FreeCellLauncher methodsFor: 'as yet unclassified'!startUp	| objectId state freeCell |	self mzHaltNew.	parameters		at: 'ETOYS_ACTIVITY_ID'		ifPresent: [:activityId | 			freeCellFilename := ''.			freeCellMimeType := 'application/freecell'.			objectId := parameters						at: 'OBJECT_ID'						ifAbsent: [].			freeCell := FreeCell instance.			objectId isNil				ifFalse: [freeCellProperties := self getProperties: objectId.					state := freeCellProperties								at: 'object_state'								ifAbsent: [].					freeCell := freeCell deSerializeStateFrom: state].			freeCell displayRestored]! !!FreeCellLauncher methodsFor: 'as yet unclassified'!updateJournalEntryFor: objectId filename: aFilename mimetype: mimetypeString state: aState activityTitle: aTitle 	| properties |	self mzHaltNew.	properties := freeCellProperties.	properties at: 'title' put: aTitle.	properties at: 'mime_type' put: mimetypeString.	properties at: 'object_state' put: aState.	self dataStore		update: objectId		with: properties		with: aFilename squeakToUtf8		with: true! !!FreeCellLauncher class methodsFor: 'as yet unclassified'!instance	self mzHaltNew.	^ FreeCellLauncherSingleton		ifNil: [FreeCellLauncherSingleton := self basicNew initialize]! !!FreeCellLauncher class methodsFor: 'as yet unclassified'!new	self mzHaltNew.	^ FreeCellLauncher instance! !!FreeCellLauncher class methodsFor: 'as yet unclassified'!nullifyInstance	self mzHaltNew.	FreeCellLauncherSingleton := nil! !!FreeCellStatistics methodsFor: 'sugar serialization'!deSerializeStateFrom: aString 	| arr |	arr := aString subStrings: ' '.	sessionWins := (arr at: 1) asInteger.	sessionLosses := (arr at: 2) asInteger.	totalWins := (arr at: 3) asInteger.	totalLosses := (arr at: 4) asInteger.	streakWins := (arr at: 5) asInteger.	streakLosses := (arr at: 6) asInteger.	winsWithReplay := (arr at: 7) asInteger.	lossesWithReplay := (arr at: 8) asInteger.	currentCount := (arr at: 9) asInteger! !!FreeCellStatistics methodsFor: 'sugar serialization'!serializeState	| s |	s := sessionWins asString , ' '.	s := s , sessionLosses asString , ' '.	s := s , totalWins asString , ' '.	s := s , totalLosses asString , ' '.	s := s , streakWins asString , ' '.	s := s , streakLosses asString , ' '.	s := s , winsWithReplay asString , ' '.	s := s , lossesWithReplay asString , ' '.	s := s , currentCount asString.	^ s! !AlignmentMorph subclass: #FreeCell	instanceVariableNames: 'board cardsRemainingDisplay elapsedTimeDisplay gameNumberDisplay lastGameLost state autoMoveRecursionCount myFillStyle'	classVariableNames: 'FreeCellSingleton Statistics'	poolDictionaries: ''	category: 'Morphic-Games'!|params freeCellLauncher|
Project current flapsSuppressed: true.
params := AbstractLauncher extractParameters.
freeCellLauncher := FreeCellLauncher instance.
freeCellLauncher parameters: params.
freeCellLauncher startUp.
!